// Generated by CoffeeScript 1.3.3
(function() {
  var reboot, root;

  root = typeof window !== "undefined" && window !== null ? window : global;

  reboot = (function() {

    reboot.tables = 0;

    function reboot() {
      console.log('rebooted');
    }

    reboot.prototype.tableColumnsToObject = function(table) {
      var columns, values, _i, _len, _ref;
      columns = {
        head: [],
        values: []
      };
      columns.head = $(table).find('thead th').map(function() {
        return $(this).text().replace(/[\r\n]+/, '').trim();
      });
      _ref = columns.head;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        values = _ref[_i];
        columns.values.push([]);
      }
      $(table).find('tbody tr').map(function() {
        return $(this).find('td').each(function(index) {
          return columns.values[index].push($(this).text().replace(/[\r\n]+/, '').trim());
        });
      });
      return columns;
    };

    reboot.prototype.isNumber = function(value) {
      if (void 0 === value || null === value) {
        return false;
      }
      if (typeof value === 'number') {
        return true;
      }
      return !isNaN(value - 0);
    };

    reboot.prototype.checkArrayOnlyContainsNumbers = function(array) {
      var value, _i, _len;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        if (!this.isNumber(value)) {
          return false;
        }
      }
      return true;
    };

    reboot.prototype.arraySum = function(array) {
      var sum, value, _i, _len;
      sum = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        sum += value - 0;
      }
      return sum;
    };

    reboot.prototype.rebootTableBarCharts = function() {
      var makeNewIds, renderHorizontalBarChart, sumColumns, that;
      sumColumns = function(columns) {
        var subarray, sums, _i, _len, _ref;
        sums = [];
        _ref = columns.values;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subarray = _ref[_i];
          if (!that.checkArrayOnlyContainsNumbers(subarray)) {
            throw 'the table body contains cells that do not contain numbers';
          }
          sums.push(that.arraySum(subarray));
        }
        return sums;
      };
      makeNewIds = function(table) {
        if (!(table.id === "")) {
          return "" + table.id + "-rebooted";
        } else {
          table.id = "table-source-chart-" + reboot.tables;
          return "table-chart-bar-" + reboot.tables;
        }
      };
      renderHorizontalBarChart = function(attachment, columns, columnSums, id, width, margin) {
        var chart, counter, endLevel, level, levelAddition, subtable, value, _i, _j, _len, _len1, _ref;
        if (width == null) {
          width = 30;
        }
        if (margin == null) {
          margin = 5;
        }
        chart = "<div id=\"" + id + "\" class=\"chart-bar-horizontal\" style=\"height: " + (Math.max.apply(0, columnSums)) + "px; width: " + (columns.head.length * (width + margin)) + "px\">";
        counter = 0;
        _ref = columns.values;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subtable = _ref[_i];
          chart += "<div class=\"bar-horizontal\" style=\"width: " + width + "px; height: " + columnSums[counter] + "px; left: " + (counter * (width + margin)) + "px; " + attachment + ": 0px\">";
          level = 0;
          endLevel = attachment === 'bottom' ? 0 : subtable.length - 1;
          for (_j = 0, _len1 = subtable.length; _j < _len1; _j++) {
            value = subtable[_j];
            levelAddition = '';
            if (level === endLevel) {
              levelAddition = attachment === 'bottom' ? '-top' : '-bottom';
            }
            chart += "<div class=\"bar-horizontal-part" + levelAddition + "\" style=\"width: " + width + "px; height: " + value + "px;\"><div class=\"text\">" + value + "</div></div>";
            level++;
          }
          chart += "</div>";
          counter++;
        }
        chart += "</div>";
        return chart;
      };
      that = this;
      $('table.htable-chart-bar-horizontal:not(.rebooted)').each(function() {
        var chart, columnSums, columns, newid;
        columns = that.tableColumnsToObject(this);
        columnSums = sumColumns(columns);
        newid = makeNewIds(this);
        chart = renderHorizontalBarChart('bottom', columns, columnSums, newid);
        $(chart).insertAfter($("#" + this.id));
        $(this).addClass('hidden');
        return reboot.tables++;
      });
      return $('table.htable-chart-bar-horizontal-inversed:not(.rebooted)').each(function() {
        var chart, columnSums, columns, newid;
        columns = that.tableColumnsToObject(this);
        columnSums = sumColumns(columns);
        newid = makeNewIds(this);
        chart = renderHorizontalBarChart('top', columns, columnSums, newid);
        $(chart).insertAfter($("#" + this.id));
        $(this).addClass('hidden');
        return reboot.tables++;
      });
    };

    return reboot;

  })();

  if (!(typeof $ !== "undefined" && $ !== null)) {
    throw 'jQuery needs to be installed and required in order to get reboot to run';
    console.error('reboot failed: jQuery not initialized');
  } else {
    $(document).ready(function() {
      var rebooter;
      rebooter = new reboot;
      try {
        return rebooter.rebootTableBarCharts();
      } catch (e) {
        return console.log(e);
      }
    });
  }

}).call(this);
